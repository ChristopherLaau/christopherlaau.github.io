<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Christopherの博客</title>
  
  <subtitle>纸上得来终觉浅</subtitle>
  <link href="https://christopherrliu.github.io/atom.xml" rel="self"/>
  
  <link href="https://christopherrliu.github.io/"/>
  <updated>2020-10-06T08:32:16.293Z</updated>
  <id>https://christopherrliu.github.io/</id>
  
  <author>
    <name>Christopher Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>每天一道leetcode——sum of distances in tree</title>
    <link href="https://christopherrliu.github.io/2020/10/06/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%81%93leetcode-sum-of-distances-in-tree/"/>
    <id>https://christopherrliu.github.io/2020/10/06/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%81%93leetcode-sum-of-distances-in-tree/</id>
    <published>2020-10-06T07:09:33.000Z</published>
    <updated>2020-10-06T08:32:16.293Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><h4 id="英文题意"><a href="#英文题意" class="headerlink" title="英文题意"></a>英文题意</h4><p><img src="https://youknow.wang/images/2020/10/06/image2b17e4a6d9490441.png"></p><h4 id="中文题意"><a href="#中文题意" class="headerlink" title="中文题意"></a>中文题意</h4><p><img src="https://youknow.wang/images/2020/10/06/image167c08d25f7d5940.png"></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h4 id="普通做法"><a href="#普通做法" class="headerlink" title="普通做法"></a>普通做法</h4><p>本题很容易想到$O(N^2)$的做法：遍历节点，对每个节点做一次dfs，统计路径和，代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">dp[id] = <span class="number">0</span>;</span><br><span class="line">sz[id] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> next : Edges[id]) &#123;</span><br><span class="line"><span class="keyword">if</span>(next == fa) <span class="keyword">continue</span>;</span><br><span class="line">dfs(next, id);</span><br><span class="line">dp[id] += dp[next] + sz[next];</span><br><span class="line">sz[id] += sz[next];</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将所有的$dp[root]$记录输出即可，但是这种做法显然会超时</p><h4 id="dp的做法"><a href="#dp的做法" class="headerlink" title="dp的做法"></a>dp的做法</h4><p>树上的路径统计一般都与树形dp有关，考虑本题，对于某个节点，我们可以利用一次dfs求出它到它的所有子树节点的路径长度和，例如：</p><p><img src="https://youknow.wang/images/2020/10/06/1.png"></p><p>上图中的$4$号节点，假设我们用$dp1$数组来表示子树节点路径和，那么有$dp1[4] = dp[5] + dp[6] + sz[5] + sz[6]$，其中$sz$表示该节点的子节点数（包括自身），即：<br>$$<br>\begin{aligned}<br>dp1[u] &amp;= \sum dp1[son] + \sum sz[son] \<br>sz[u] &amp;= \sum sz[son] + 1<br>\end{aligned}<br>$$<br>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">dp1[id] = <span class="number">0</span>;</span><br><span class="line">    sz[id] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> next : Edges[id]) &#123;</span><br><span class="line"><span class="keyword">if</span>(next == fa) <span class="keyword">continue</span>;</span><br><span class="line">cnt++;</span><br><span class="line">        dfs1(next, id);</span><br><span class="line">        dp1[id] += dp1[next] + sz[next];</span><br><span class="line">        sz[id] += sz[next];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就求出子树所有节点的路径和了，现在考虑非子树节点的路径和，观察下图：</p><p><img src="https://youknow.wang/images/2020/10/06/2.png"></p><p>对于节点$4$，非子树节点的路径和主要由两部分组成，一是父节点$2$的非子树节点的路径和，另外则是父节点$2$的子树节点路径和减去节点$4$的子树节点路径和再减去$sz[4]$。说起来比较绕口，假设我们用$dp2$表示非子树节点的路径和，那么有$dp2[4] = dp2[2] + dp1[2] - dp1[4] - sz[4] + 6 - sz[4]$，其中$6 - sz[4]$是绿色边的贡献，转换为一般情况就是：<br>$$<br>dp2[id] = dp2[fa] + dp1[fa] + N - dp1[id] - 2 * sz[id]<br>$$<br>代码为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(id) &#123;</span><br><span class="line">dp2[id] = dp2[fa] + dp1[fa] - dp1[id] + sz[<span class="number">0</span>] - <span class="number">2</span> * sz[id];</span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">dp2[id] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> next : Edges[id]) &#123;</span><br><span class="line"><span class="keyword">if</span>(next == fa) <span class="keyword">continue</span>;</span><br><span class="line">dfs2(next, id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了$dp1$和$dp2$，最后的答案就是$ans[id] = dp1[id] + dp2[id]$</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>主要的耗时操作为两次dfs，时间复杂度为$O(2N)$，也就是线性的</p><h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><p>空间复杂的同样是线性的</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp1, dp2, sz, ans;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; Edges;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">sumOfDistancesInTree</span><span class="params">(<span class="keyword">int</span> N, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;</span><br><span class="line">        dp1.resize(N, <span class="number">0</span>);</span><br><span class="line">        dp2.resize(N, <span class="number">0</span>);</span><br><span class="line">        sz.resize(N, <span class="number">0</span>);</span><br><span class="line">        ans.resize(N, <span class="number">0</span>);</span><br><span class="line">        Edges.resize(N);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> edge : edges) &#123;</span><br><span class="line">            Edges[edge[<span class="number">0</span>]].push_back(edge[<span class="number">1</span>]);</span><br><span class="line">            Edges[edge[<span class="number">1</span>]].push_back(edge[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs1(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">        dfs2(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">        dp1[id] = <span class="number">0</span>;</span><br><span class="line">        sz[id] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> next : Edges[id]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(next == fa) <span class="keyword">continue</span>;</span><br><span class="line">            cnt++;</span><br><span class="line">            dfs1(next, id);</span><br><span class="line">            dp1[id] += dp1[next] + sz[next];</span><br><span class="line">            sz[id] += sz[next];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(id) &#123;</span><br><span class="line">            dp2[id] = dp2[fa] + dp1[fa] - dp1[id] + sz[<span class="number">0</span>] - <span class="number">2</span> * sz[id];</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            dp2[id] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[id] = dp1[id] + dp2[id];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> next : Edges[id]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(next == fa) <span class="keyword">continue</span>;</span><br><span class="line">            dfs2(next, id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="提交结果"><a href="#提交结果" class="headerlink" title="提交结果"></a>提交结果</h3><p><img src="https://youknow.wang/images/2020/10/06/image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;h4 id=&quot;英文题意&quot;&gt;&lt;a href=&quot;#英文题意&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="leetcode" scheme="https://christopherrliu.github.io/categories/leetcode/"/>
    
    
    <category term="C++" scheme="https://christopherrliu.github.io/tags/C/"/>
    
    <category term="算法" scheme="https://christopherrliu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="树形dp" scheme="https://christopherrliu.github.io/tags/%E6%A0%91%E5%BD%A2dp/"/>
    
    <category term="面试" scheme="https://christopherrliu.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>搭建自己的VPS</title>
    <link href="https://christopherrliu.github.io/2020/10/05/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84VPS/"/>
    <id>https://christopherrliu.github.io/2020/10/05/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84VPS/</id>
    <published>2020-10-05T08:25:35.000Z</published>
    <updated>2020-10-05T11:20:56.472Z</updated>
    
    <content type="html"><![CDATA[<p>学计算机的经常需要访问一些国外的网站，比如Google和GitHub之类的，但是由于一些不可抗的原因，这些网站要么访问不了，要么速度极慢。所以想搭建一个用来流量转发的VPS</p><a id="more"></a><h3 id="购买VPS"><a href="#购买VPS" class="headerlink" title="购买VPS"></a>购买VPS</h3><h4 id="常用VPS"><a href="#常用VPS" class="headerlink" title="常用VPS"></a>常用VPS</h4><p>在网上查了一下，现在用的比较多的就是<a href="www.bwh88.net">搬瓦工</a>和<a href="www.vultr.com">Vultr</a>这两个VPS供应商，其中搬瓦工已经不幸被墙了。。。</p><p>关于这两家的优劣，网上已经有很多比较了，我就不再作赘述，大家任意选择一个即可。</p><p>我为了图方便，选了Vultr，通过这个<a href="https://www.vultr.com/?ref=8696431-6G">链接</a>注册冲$25送 $100，还是很实惠的</p><h4 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h4><p>进入Vultr的官网</p><p><img src="https://youknow.wang/images/2020/10/05/image.png"></p><p>填好邮箱和密码就可以注册账号，<del>不用费尽心思想昵称了</del>。</p><p>验证完邮箱之后进入个人主页。首先需要我们进行充值，这里我选择<strong>AliPay</strong>（支付宝）充值，如果你有信用卡也可以</p><p><img src="https://youknow.wang/images/2020/10/05/image62f0173b62f293b5.png"></p><p>填写详细信息充值即可</p><h4 id="配置VPS"><a href="#配置VPS" class="headerlink" title="配置VPS"></a>配置VPS</h4><p>有了钱我们就可以选机器了，首先是节点所在地，这里选择日本或者洛杉矶都可以</p><p><img src="https://youknow.wang/images/2020/10/05/imagebac880fc174c88af.png"></p><p>操作系统选择Linux操作系统，比较稳定</p><p><img src="https://youknow.wang/images/2020/10/05/imagec75ada7a9a01f805.png"></p><p>配置方面选择最便宜的就可以了，足够我们日常使用</p><p><img src="https://youknow.wang/images/2020/10/05/image-20201005171935170.png"></p><p>其余选项默认即可，配好的VPS如下图</p><p><img src="https://youknow.wang/images/2020/10/05/image81ae6630f43c7034.png"></p><p>尝试使用SSH连接</p><p><img src="https://youknow.wang/images/2020/10/05/image2e1a41ed20e37956.png"></p><p>没问题</p><h3 id="安装配置SS服务"><a href="#安装配置SS服务" class="headerlink" title="安装配置SS服务"></a>安装配置SS服务</h3><h4 id="什么是SS"><a href="#什么是SS" class="headerlink" title="什么是SS"></a>什么是SS</h4><p>SS全称shadowsocks，一开始为个人独立开发并用作“科学上网”，后被大家所熟知和广泛使用。<del>再后来，据说作者被请去“喝茶”，停止了该项目。</del></p><p>SSR全称shadowsocks-R。SSR作者声称SS不够隐匿，容易被防火墙检测到，SSR在改进了混淆和协议，更难被防火墙检测到。简单地说，SSR是SS的改进版。</p><h4 id="安装SS"><a href="#安装SS" class="headerlink" title="安装SS"></a>安装SS</h4><h5 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-pip</span><br></pre></td></tr></table></figure><h5 id="安装Shadowsocks"><a href="#安装Shadowsocks" class="headerlink" title="安装Shadowsocks"></a>安装Shadowsocks</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install https://github.com/shadowsocks/shadowsocks/archive/master.zip</span><br></pre></td></tr></table></figure><p>安装完成后，执行<code>ssserver --version</code>查看版本</p><p><img src="https://youknow.wang/images/2020/10/05/image248bb6f7e0c3b7c7.png"></p><h5 id="配置Shadowsocks"><a href="#配置Shadowsocks" class="headerlink" title="配置Shadowsocks"></a>配置Shadowsocks</h5><p>创建配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/shadowsocks.json</span><br></pre></td></tr></table></figure><p>在文件中输入以下内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;server&quot;</span>:<span class="string">&quot;服务器ip&quot;</span>,</span><br><span class="line"><span class="attr">&quot;server_port&quot;</span>:<span class="number">6666</span>,</span><br><span class="line"><span class="attr">&quot;local_address&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;local_port&quot;</span>:<span class="number">1080</span>,</span><br><span class="line"><span class="attr">&quot;password&quot;</span>:<span class="string">&quot;连接密码&quot;</span>,</span><br><span class="line"><span class="attr">&quot;timeout&quot;</span>:<span class="number">300</span>,</span><br><span class="line"><span class="attr">&quot;method&quot;</span>:<span class="string">&quot;aes-256-cfb&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照自己需求修改，保存退出</p><p>执行<code>ssserver -c /etc/shadowsocks.json -d start</code>启动ss</p><p><img src="https://youknow.wang/images/2020/10/05/image4608d3f0fb1070e5.png"></p><p>至此ss安装配置完成</p><h3 id="连接ss服务"><a href="#连接ss服务" class="headerlink" title="连接ss服务"></a>连接ss服务</h3><p>ss提供了多个平台的客户端</p><ul><li><a href="https://github.com/shadowsocks/shadowsocks-windows/releases">Windows客户端</a></li><li><a href="https://github.com/shadowsocks/shadowsocks-qt5/releases">Linux客户端</a></li><li><a href="https://www.shadowsocks.org/en/index.html">Android客户端</a></li></ul><p>下载对应的客户端安装就可以连接了，这里以Windows客户端为例，解压下载好的压缩包</p><p><img src="https://youknow.wang/images/2020/10/05/image3c04b929b2c6886b.png"></p><p>运行.exe文件，会进入服务器配置界面</p><p><img src="https://youknow.wang/images/2020/10/05/image39de23c355fb5eff.png"></p><p>根据你的设置填写，点击确定</p><p>在托盘中右击客户端，选择代理模式</p><p><img src="https://youknow.wang/images/2020/10/05/image4ab9738fd9fb56bb.png"></p><p>一般选择PAC模式就行，打开浏览器访问Wikipedia试试，不出意外的话已经可以显示了</p><p><img src="https://youknow.wang/images/2020/10/05/image45cf91e4e02accc8.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;学计算机的经常需要访问一些国外的网站，比如Google和GitHub之类的，但是由于一些不可抗的原因，这些网站要么访问不了，要么速度极慢。所以想搭建一个用来流量转发的VPS&lt;/p&gt;</summary>
    
    
    
    <category term="瞎搞" scheme="https://christopherrliu.github.io/categories/%E7%9E%8E%E6%90%9E/"/>
    
    
    <category term="VPS" scheme="https://christopherrliu.github.io/tags/VPS/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://christopherrliu.github.io/2020/10/05/hello-world/"/>
    <id>https://christopherrliu.github.io/2020/10/05/hello-world/</id>
    <published>2020-10-05T02:24:00.765Z</published>
    <updated>2020-10-05T13:13:03.498Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="测试" scheme="https://christopherrliu.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
</feed>
